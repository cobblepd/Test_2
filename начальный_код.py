# game dataframe
games_data = [
    {"game": "Minecraft", "hours_played": 120, "rating": 4.8, "genre": "Sandbox", "players": 140_000_000, "revenue_millions": 3500},
    {"game": "Fortnite", "hours_played": 90, "rating": 4.2, "genre": "Battle Royale", "players": 250_000_000, "revenue_millions": 5400},
    {"game": "Among Us", "hours_played": 40, "rating": 3.8, "genre": "Party", "players": 500_000_000, "revenue_millions": 50},
    {"game": "Roblox", "hours_played": 150, "rating": 4.5, "genre": "Sandbox", "players": 202_000_000, "revenue_millions": 2000},
    {"game": "Genshin Impact", "hours_played": 110, "rating": 4.7, "genre": "RPG", "players": 65_000_000, "revenue_millions": 4000},
    {"game": "Call of Duty", "hours_played": 200, "rating": 4.6, "genre": "Shooter", "players": 100_000_000, "revenue_millions": 8000},
    {"game": "Valorant", "hours_played": 95, "rating": 4.4, "genre": "Shooter", "players": 20_000_000, "revenue_millions": 500},
    {"game": "League of Legends", "hours_played": 250, "rating": 4.1, "genre": "MOBA", "players": 150_000_000, "revenue_millions": 1800},
    {"game": "The Sims 4", "hours_played": 80, "rating": 4.3, "genre": "Simulation", "players": 36_000_000, "revenue_millions": 1000},
    {"game": "Apex Legends", "hours_played": 180, "rating": 4.5, "genre": "Battle Royale", "players": 130_000_000, "revenue_millions": 2500},
    {"game": "Elden Ring", "hours_played": 130, "rating": 4.9, "genre": "RPG", "players": 20_000_000, "revenue_millions": 700},
    {"game": "Terraria", "hours_played": 60, "rating": 4.6, "genre": "Sandbox", "players": 35_000_000, "revenue_millions": 200},
    {"game": "Overwatch", "hours_played": 140, "rating": 4.4, "genre": "Shooter", "players": 50_000_000, "revenue_millions": 1200},
    {"game": "Hollow Knight", "hours_played": 50, "rating": 4.8, "genre": "Metroidvania", "players": 3_000_000, "revenue_millions": 50},
    {"game": "Stardew Valley", "hours_played": 170, "rating": 4.7, "genre": "Simulation", "players": 20_000_000, "revenue_millions": 50},
]

# Вывод всей информации
for game in games_data:
    print(f'''
-------------------------
Игра: {game['game']}, 
Время игры: {game['hours_played']} часов, 
Рейтинг: {game['rating']}, 
Жанр: {game['genre']}, 
Игроки: {game['players']} чел., 
Выручка: {game['revenue_millions']} млн.
-------------------------
''')
'''                     Фильтрация.                          '''

'''                 Фильтрация по жанру игры:                       '''

# код писать здесь


print('-------------------------')

# Фильтрация по кол-ву игроков:

# код писать здесь

print('-------------------------')

# Фильтрация с несколькими условиями:

# код писать здесь

print('-------------------------')

'''-------------------Практика-----------------------------'''

# Задание 1. Найти все игры с рейтингои выше 4.5

# код писать здесь

print('-------------------------')

# Задание 2. Найти игры, в которых время игры (hours_played) более 100 часов

# код писать здесь

print('-------------------------')

# Задание 3. Найти игры, с рейтингом ниже 4.0 и с количеством игроков менее 50 миллионов

# код писать здесь

print('-------------------------')

# Задание 4. Найти игры, которые были сыграны более 100 часов и имеют рейтинг выше 4.5

# код писать здесь

print('-------------------------')

'''                    Нахождение статистик        '''

# Игра с самым высоким рейтингом

# код писать здесь

print('-------------------------')

# Среднее количество часов, проведенное в играх

# код писать здесь

print('-------------------------')

# Самая доходная игра

# код писать здесь

print('-------------------------')

# Задания на вычисления статистик

#Задача 1. Определение общую аудиторию всех игр.

# код писать здесь

print('-------------------------')

#Задача 2. Вычислить средний доход игр.

# код писать здесь

print('-------------------------')

#Задача 3. Найти игры с самым длинным временем игры.

# код писать здесь

print('-------------------------')

#Задача 4.  Найти игру с самым низким доходом.

# код писать здесь

print('-------------------------')

# Группировка данных

# код писать здесь

print('------------------------')



# Вычисление средних значений рейтингов по жанрам

# код писать здесь

print('--------------------------------')

# Процент игр из каждого жанра в общей выборке
# код писать здесь



''' Практика по группировке данных '''

# Задание 1: Найти самый доходный жанр.
# Алгоритм работы :
# 1. Пройти по словарю games_by_genre, где ключи — это жанры, а значения — списки игр.
# 2. Для каждого жанра подсчитать суммарный доход, используя данные о доходах игр (game[‘revenue_millions’]).
# 3. Определить жанр с наибольшим суммарным доходом.
# 4. Вывести результат.

# код писать здесь

# Задание 2: Найти самый популярный жанр
# Алгоритм работы:
# 1. Для каждого жанра в словаре games_by_genre подсчитать количество игр в списке, соответствующем жанру.
# 2. Сравнить количество игр для каждого жанра, чтобы найти жанр с наибольшим числом игр.
# 3. Вывести результат.


# код писать здесь




# Задание 3. Найти средний доход с каждого жанра
# Алгоритм работы:
# 1. Пройти по словарю games_by_genre.
# 2. Для каждого жанра подсчитать суммарный доход всех игр.
# 3. Разделить общий доход на количество игр в жанре, чтобы получить средний доход.
# 4. Вывести средний доход для каждого жанра.

# код писать здесь

# Домашнее задание
#1. Группировка по количеству игроков:

# код писать здесь

#2. Группировка по среднему времени игры:

# код писать здесь

#3. Группировка по рейтингу:

# код писать здесь

#4. Группировка по доходу:

# код писать здесь 

